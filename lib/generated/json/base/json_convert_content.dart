// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_sample/http/api_response.dart';
import 'package:flutter_sample/generated/json/api_response_helper.dart';
import 'package:flutter_sample/model/page_response_entity.dart';
import 'package:flutter_sample/generated/json/page_response_entity_helper.dart';
import 'package:flutter_sample/model/article.dart';
import 'package:flutter_sample/generated/json/article_helper.dart';
import 'package:flutter_sample/http/paging_entity.dart';
import 'package:flutter_sample/generated/json/paging_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case ApiResponse:
				return apiResponseFromJson(data as ApiResponse, json) as T;
			case PageResponseEntity:
				return pageResponseEntityFromJson(data as PageResponseEntity, json) as T;
			case ArticleModel:
				return articleModelFromJson(data as ArticleModel, json) as T;
			case PagingEntity:
				return pagingEntityFromJson(data as PagingEntity, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ApiResponse:
				return apiResponseToJson(data as ApiResponse);
			case PageResponseEntity:
				return pageResponseEntityToJson(data as PageResponseEntity);
			case ArticleModel:
				return articleModelToJson(data as ArticleModel);
			case PagingEntity:
				return pagingEntityToJson(data as PagingEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ApiResponse).toString()){
			return ApiResponse().fromJson(json);
		}
		if(type == (PageResponseEntity).toString()){
			return PageResponseEntity().fromJson(json);
		}
		if(type == (ArticleModel).toString()){
			return ArticleModel().fromJson(json);
		}
		if(type == (PagingEntity).toString()){
			return PagingEntity().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ApiResponse>[] is M){
			return data.map<ApiResponse>((e) => ApiResponse().fromJson(e)).toList() as M;
		}
		if(<PageResponseEntity>[] is M){
			return data.map<PageResponseEntity>((e) => PageResponseEntity().fromJson(e)).toList() as M;
		}
		if(<ArticleModel>[] is M){
			return data.map<ArticleModel>((e) => ArticleModel().fromJson(e)).toList() as M;
		}
		if(<PagingEntity>[] is M){
			return data.map<PagingEntity>((e) => PagingEntity().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}